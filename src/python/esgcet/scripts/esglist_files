#!/usr/bin/env python

import sys
import getopt

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from esgcet.config import loadConfig, initLogging
from esgcet.model import Dataset
from esgcet.query import printResult
from esgcet.messaging import warning

usage = """Usage:
    esglist_files [options] dataset_id [dataset_id ...]

    List the files in a dataset.

Arguments:
    dataset_id: Dataset identifier, or '-' to read dataset ids from standard input

Options:

    --echo-sql:
        Echo SQL commands

    --full:
        Print a full listing.

    -h, --help:
        Print a help message.

    -i init_file:
        Initialization file. If not specified, the default installed init file is read.

Example:

    List file paths and sizes for model ukmo_hadgem1, experiment 1pctto2x:

        % esglist_datasets --model ukmo_hadgem1 --experiment 1pctto2x --no-header --select name ipcc4 | esglist_files --full -

"""

def main(argv):

    try:
        args, lastargs = getopt.getopt(argv, "hi:", ['echo-sql', 'full'])
    except getopt.error:
        print sys.exc_value
        print usage
        sys.exit(0)

    if len(lastargs)>0:
        if lastargs[0]=='-':
            datasetIds = [line.strip() for line in sys.stdin.readlines()]
        else:
            datasetIds = lastargs
    else:
        print "No dataset specified."
        print usage
        sys.exit(0)

    echoSql = False
    fullList = False
    init_file = None
    for flag, arg in args:
        if flag=='--echo-sql':
            echoSql = True
        elif flag=='--full':
            fullList = True
        elif flag in ['-h', '--help']:
            print usage
            sys.exit(0)
        elif flag=='-i':
            init_file = arg

    # Load the configuration and set up a database connection
    config = loadConfig(init_file)
    engine = create_engine(config.get('extract', 'dburl'), echo=echoSql, pool_recycle=3600)
    initLogging('extract', override_sa=engine)
    Session = sessionmaker(bind=engine, autoflush=True, autocommit=False)
    session = Session()

    # Lookup the datasets
    filetuples = []
    for datasetId in datasetIds:
        dset = session.query(Dataset).filter_by(name=datasetId).first()
        if dset is None:
            warning("Dataset not found: %s"%datasetId)
            continue

        if fullList:
            filetuples.extend([(file.path, str(file.size), str(file.publication_time), file.tracking_id, file.checksum) for file in dset.files])
        else:
            for file in dset.files:
                print file.path

    if fullList:
        printResult(['path', 'size', 'publication_time', 'tracking_id', 'checksum'], filetuples)

    session.close()

if __name__=='__main__':
    main(sys.argv[1:])
    
