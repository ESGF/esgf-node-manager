#!/bin/bash

#####
# Installation Script Fetcher
# For the ESG Data Node or Gateway application stack
#        (author: gavin@llnl.gov)
#####

#uses: wget

install_prefix=${prefix:-"/usr/local"}
esg_dist_url=http://198.128.245.140/dist

id_check() {
    id | grep root >& /dev/null
    [ $? != 0 ] && printf "[FAIL] \n\tMust run this program with root's effective UID\n\n" && return 1
    return 0
}

get_latest() {
    local type="${1:-node}"
    
    if [ "${type}" != "node" ] && [ "${type}" != "gway" ]; then 
	usage
    fi
	    
    script_install_dir=${install_prefix}/bin
    mkdir -p ${script_install_dir}
    #NOTE: boot script location is a RedHat/CentOS thing... to make this cross distro compatible clean this up.
    local init_scripts_dir=/etc/rc.d/init.d
    pushd $script_install_dir >& /dev/null
    #Get files
    local fetch_file=esg-${type}

    local ret
    echo "Checking...."
    if [ "$type" = "node" ]; then
	checked_get ${esg_dist_url}/esg-node/${fetch_file} 
        ret=$?
        ((ret == 1)) && echo "${type} install script already up-to-date"
        ((ret == 0)) && echo "Updated ${type} install script from PCMDI's ESG distribution site at LLNL"
    else
	checked_get ${esg_dist_url}/externals/bootstrap/${fetch_file} 
        ret=$?
        ((ret == 1)) && echo "${type} install script already up-to-date"
        ((ret == 0)) && echo "Updated ${type} install script from PCMDI's ESG distribution site at LLNL"
    fi
    (( ret > 1 )) && popd >& /dev/null && return 1
    chmod 755 ${fetch_file}
    [ -e ${init_scripts_dir}/${fetch_file} ] && cp -v ${fetch_file} ${init_scripts_dir}/${fetch_file}
    popd >& /dev/null
}

############################################
# Utility Functions
############################################
check_for_update() {
    local local_file
    local remote_file
    if (( $# == 1 )); then
        remote_file=${1}
        local_file=$(readlink -f ${1##*/})
    elif (( $# == 2 )); then
        local_file=${1}
        remote_file=${2}
    else
        echo "function \"checked_get\":  Called with incorrect number of args! (fatal)"
        exit 1
    fi                      
    
    [ ! -e ${local_file} ] && echo " WARNING: Could not find local file ${local_file}" && return 0
    [ ! -x ${local_file} ] && echo " WARNING: local file ${local_file} not executible" && chmod 755 ${local_file}
    diff <(md5sum ${local_file} | tr -s " " | cut -d " " -f 1) <(curl -s ${remote_file}.md5 | tr -s " " | cut -d " " -f 1) >& /dev/null
    (( $? != 0 )) && echo " Update Available @ ${remote_file}" && return 0
    return 1
}

checked_get() {
    check_for_update $@
    [ $? != 0 ] && return 1

    local local_file
    local remote_file
    if (( $# == 1 )); then
        remote_file=${1}
        local_file=${1##*/}
    elif (( $# == 2 )); then
        local_file=${1}
        remote_file=${2}
    else
        echo "function \"checked_get\":  Called with incorrect number of args! (fatal)"
        exit 1
    fi                      
    
    if [ -e ${local_file} ]; then
	cp -v ${local_file} ${local_file}.bak 
	chmod 600 ${local_file}.bak
    fi
    wget -O ${local_file} ${remote_file}
    [ $? != 0 ] && echo " ERROR: Problem pulling down [${remote_file##*/}] from esg distribution site" && return 2
    diff <(md5sum ${local_file} | tr -s " " | cut -d " " -f 1) <(curl -s ${remote_file}.md5 | tr -s " " | cut -d " " -f 1) >& /dev/null
    [ $? != 0 ] && echo " WARNING: Could not verify this file!" && return 3
    echo "[VERIFIED]"
    return 0
}

self_verify() {
    #echo "diff <(md5sum ${0} | tr -s " " | cut -d " " -f 1) <(curl ${esg_dist_url}/esg-node/${0##*/}.md5 | tr -s " " | cut -d " " -f 1) >& /dev/null "
    diff <(md5sum ${0} | tr -s " " | cut -d " " -f 1) <(curl -s ${esg_dist_url}/esg-node/${0##*/}.md5 | tr -s " " | cut -d " " -f 1) >& /dev/null
    [ $? != 0 ] && echo " WARNING: Could not verify myself!" && return 3
    echo "[VERIFIED]"
    return 0
}

############################################

usage() {
    printf "
    usage:
        esg-update [ node ] [ gway ]

    \n"
    exit 1
}

############################################
# Main
############################################

if id_check 
then
    self_verify >& /dev/null
    (( $? > 0 )) && printf "WARNING: $0 could not be verified!! \n(This file, ${0}, may have been tampered with or there is a newer version posted at the distribution server.\nPlease re-fetch this script.)\n\n" && exit 1
    echo "checking on updates for $@"
    if (( ($# < 3) && ($# > 0) )); then
	for type in "$@"
	do
	    get_latest ${type}
	done
    else
	usage
    fi
fi
exit 0